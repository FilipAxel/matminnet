// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    catalog       Catalog[]
    recipe        Recipe[]
    accounts      Account[]
    sessions      Session[]
    isAdmin       Boolean   @default(false)

    created_at               DateTime                   @default(now())
    updated_at               DateTime                   @updatedAt
    RecipePublicationRequest RecipePublicationRequest[]
}

model Author {
    id     String   @id @default(cuid())
    name   String   @unique
    Recipe Recipe[]

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Catalog {
    id      String            @id @default(cuid())
    name    String
    type    String?
    recipes RecipeOnCatalog[]
    image   Image[]
    User    User              @relation(fields: [userId], references: [id])
    userId  String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@index([userId])
}

model Tags {
    id       String  @id @default(cuid())
    name     String
    Recipe   Recipe? @relation(fields: [recipeId], references: [id])
    recipeId String?

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@index([recipeId])
}

model Recipe {
    id                       String                     @id @default(cuid())
    name                     String
    catalogs                 RecipeOnCatalog[]
    RecipeIngredient         RecipeIngredient[]
    tags                     Tags[]
    servingSize              Int?
    description              String?
    direction                String?
    country                  String?
    images                   Image[]
    video                    String?
    author                   Author?                    @relation(fields: [authorId], references: [id])
    authorId                 String?
    publicationStatus        String                     @default("private") // Add a field to track publication status: "private", "published", "unapproved"
    RecipePublicationRequest RecipePublicationRequest[]

    User   User?   @relation(fields: [userId], references: [id])
    userId String?

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@index([authorId])
    @@index([userId])
}

model RecipePublicationRequest {
    id       String @id @default(cuid())
    recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    status   String @default("pending") // Use this field to track the status: "pending", "approved", "declined"

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@index([recipeId])
    @@index([userId])
}

model Ingredient {
    id         String             @id @default(cuid())
    name       String             @unique
    recipes    RecipeIngredient[]
    created_at DateTime           @default(now())
    updated_at DateTime           @updatedAt
}

model RecipeIngredient {
    id           String     @id @default(cuid())
    quantity     String?
    unit         String?
    ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
    ingredientId String
    recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId     String

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@index([ingredientId])
    @@index([recipeId])
}

model RecipeOnCatalog {
    recipe    Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId  String // relation scalar field (used in the `@relation` attribute above)
    catalog   Catalog @relation(fields: [catalogId], references: [id], onDelete: Cascade)
    catalogId String // relation scalar field (used in the `@relation` attribute above)

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@id([recipeId, catalogId])
    @@index([recipeId])
    @@index([catalogId])
}

model Image {
    id        String   @id @default(cuid())
    name      String
    Recipe    Recipe?  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId  String?
    Catalog   Catalog? @relation(fields: [catalogId], references: [id], onDelete: Cascade)
    catalogId String?

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@index([recipeId])
    @@index([catalogId])
}
